name: CI test infrastructure

on:
  push:
    branches: [ develop, docker ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker buildx build --output type=oci,dest=image.tar --platform linux/amd64,linux/arm64 -t fluttercommerce:latest .

      - name: Save Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar

  infrastructure_testing:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Environment Variables
        run: |
          echo "Setting up environment variables"
          # export ENV_VAR_NAME=value
          # echo "::set-env name=ENV_VAR_NAME::value"

      - name: Cache Goss
        uses: actions/cache@v2
        with:
          path: ~/.goss
          key: ${{ runner.os }}-goss-${{ hashFiles('**/goss.yaml') }}
          restore-keys: |
            ${{ runner.os }}-goss-

      - name: Install Goss
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Goss"
          curl -fsSL https://goss.rocks/install | sh

      - name: Verify Goss Installation
        run: |
          echo "Verifying Goss installation"
          which goss
          goss --version

      - name: Create Basic Goss Test
        run: |
          echo "Creating basic Goss test"
          mkdir -p /tmp/goss-tests
          cat <<EOF > /tmp/goss-tests/goss.yaml
          file:
            /tmp/goss_test_file:
              exists: true
              mode: "0755"
              owner: "root"
              group: "root"
          command:
            echo_hello_world:
              exit-status: 0
              stdout:
                - "Hello, World!"
              stderr: []
          EOF

      - name: Create Test File
        run: |
          echo "Creating test file"
          sudo touch /tmp/goss_test_file
          sudo chmod 0755 /tmp/goss_test_file
          sudo chown root:root /tmp/goss_test_file

      - name: Debug File Information
        run: |
          echo "Debugging file information"
          ls -l /tmp/goss_test_file
          stat /tmp/goss_test_file

      - name: Run Goss Tests
        run: |
          echo "Running Goss tests"
          goss -g /tmp/goss-tests/goss.yaml validate --format json > /tmp/goss-tests/goss-outputs.json || true
          echo "Goss test output:"
          cat /tmp/goss-tests/goss-outputs.json || true

      - name: Check Goss Test Output
        run: |
          echo "Checking Goss test output"
          cat /tmp/goss-tests/goss-outputs.json
          jq .summary /tmp/goss-tests/goss-outputs.json || true

      - name: Collect Test Reports
        run: |
          echo "Collecting test reports"
          mkdir -p test-reports
          cp /tmp/goss-tests/goss-outputs.json test-reports/

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: infrastructure-test-results
          path: test-reports
