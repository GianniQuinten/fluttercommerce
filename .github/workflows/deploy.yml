name: Deploy

on:
  push:
    branches: [ develop, docker, main ]

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --release

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker buildx
        run: |
          docker buildx create --use

      - name: Build and Push Multi-Platform Docker image
        run: |
          docker buildx build --platform linux/arm64,linux/amd64 -t giannivanlooij/fluttercommerce:latest --push .

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure kubectl to use RPI cluster context
        run: |
          echo "${{ secrets.RPI_KUBECONFIG }}" > kubeconfig_cluster.yaml
          export KUBECONFIG=$PWD/kubeconfig_cluster.yaml
          echo "Current kubeconfig:"
          cat kubeconfig_cluster.yaml
          kubectl config get-contexts
          kubectl config use-context group20-context
          kubectl config current-context
          kubectl cluster-info
          kubectl get nodes

      - name: Update deployment image and Deploy application
        run: |
          sed -i 's|giannivanlooij/fluttercommerce:latest|giannivanlooij/fluttercommerce:latest|g' kubernetes/deployment.yaml
          kubectl apply --validate=false -f kubernetes/deployment.yaml
          kubectl apply --validate=false -f kubernetes/service.yaml
          kubectl apply --validate=false -f kubernetes/ingressroute.yaml

      - name: Wait for application to be ready on RPI Cluster
        timeout-minutes: 10
        run: kubectl rollout status deployment/fluttercommerce --timeout=600s

      - name: Describe deployment for debugging
        if: failure()
        run: kubectl describe deployment fluttercommerce

      - name: Get pod details
        if: failure()
        run: |
          kubectl get pods -l app=fluttercommerce -o jsonpath="{.items[*].metadata.name}" > pod_names.txt
          cat pod_names.txt

      - name: Describe each pod
        if: failure()
        run: |
          for pod in $(cat pod_names.txt); do kubectl describe pod $pod; done

      - name: Get pod logs
        if: failure()
        run: |
          for pod in $(cat pod_names.txt); do kubectl logs $pod; done

      - name: Run health check
        run: |
          kubectl exec -it $(kubectl get pod -l app=fluttercommerce -o jsonpath="{.items[0].metadata.name}") -- curl -f http://localhost:80/health
        continue-on-error: true

      - name: Run smoke tests
        run: |
          kubectl exec -it $(kubectl get pod -l app=fluttercommerce -o jsonpath="{.items[0].metadata.name}") -- curl -f http://localhost:80
        continue-on-error: true

      - name: Run end-to-end tests
        run: |
          kubectl exec -it $(kubectl get pod -l app=fluttercommerce -o jsonpath="{.items[0].metadata.name}") -- ./scripts/e2e-tests.sh
        continue-on-error: true

      - name: Run performance tests
        run: |
          kubectl exec -it $(kubectl get pod -l app=fluttercommerce -o jsonpath="{.items[0].metadata.name}") -- ./scripts/performance-tests.sh
        continue-on-error: true

      - name: Get pod logs on test failure
        if: failure()
        run: |
          for pod in $(kubectl get pods -l app=fluttercommerce -o jsonpath="{.items[*].metadata.name}"); do
            echo "Logs for pod $pod"
            kubectl logs $pod
          done

      - name: Cleanup RPI Cluster
        run: |
          kubectl delete -f kubernetes/deployment.yaml
          kubectl delete -f kubernetes/service.yaml
          kubectl delete -f kubernetes/ingressroute.yaml
