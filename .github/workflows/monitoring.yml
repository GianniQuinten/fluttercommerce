name: CI for monitoring

on:
  push:
    branches: [develop, docker]
  pull_request:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker buildx build --output type=oci,dest=image.tar --platform linux/amd64,linux/arm64 -t fluttercommerce:latest .

      - name: Save Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar

  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --release

      - name: Archive Android APK
        uses: actions/upload-artifact@v2
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build iOS App
        run: flutter build ios --release --no-codesign

      - name: Archive iOS App
        uses: actions/upload-artifact@v2
        with:
          name: ios-app
          path: build/ios/Release-iphoneos/*.app

  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows App
        run: flutter build windows --release

      - name: Archive Windows App
        uses: actions/upload-artifact@v2
        with:
          name: windows-app
          path: build/windows/runner/Release

  unit_tests:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-flutter-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Install Dependencies
        run: flutter pub get

      - name: Run Unit Tests
        run: flutter test

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fluttercommerce:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/fluttercommerce:latest

  deploy_to_minikube:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Minikube
        uses: manusa/actions-setup-minikube@v2
        with:
          minikube version: 'latest'
          kubernetes version: 'latest'
          driver: 'docker'

      - name: Configure kubectl
        run: |
          minikube kubectl -- get pods

      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/k8s-deployment.yaml
          kubectl set image deployment/fluttercommerce-deployment fluttercommerce=${{ secrets.DOCKER_USERNAME }}/fluttercommerce:latest

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/fluttercommerce-deployment
          kubectl get pods -l app=fluttercommerce

  setup_monitoring:
    runs-on: ubuntu-latest
    needs: deploy_to_minikube
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy Monitoring Stack
        run: |
          kubectl apply -f k8s/monitoring.yaml

      - name: Wait for Grafana
        run: |
          kubectl rollout status deployment/grafana -n monitoring
          kubectl port-forward -n monitoring service/grafana 3000:3000 &

      - name: Test Grafana Setup
        run: |
          curl -s http://localhost:3000/api/health | grep '"database": "ok"'
